// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: chess/chess.proto

package chess

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChessClient is the client API for Chess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	GetRooms(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	Moves(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	GetRoomInfo(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	ListenToRoom(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (Chess_ListenToRoomClient, error)
}

type chessClient struct {
	cc grpc.ClientConnInterface
}

func NewChessClient(cc grpc.ClientConnInterface) ChessClient {
	return &chessClient{cc}
}

func (c *chessClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/Chess/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/Chess/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessClient) GetRooms(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, "/Chess/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessClient) Moves(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/Chess/Moves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessClient) GetRoomInfo(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/Chess/GetRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessClient) ListenToRoom(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (Chess_ListenToRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chess_ServiceDesc.Streams[0], "/Chess/ListenToRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &chessListenToRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chess_ListenToRoomClient interface {
	Recv() (*RoomResponseStream, error)
	grpc.ClientStream
}

type chessListenToRoomClient struct {
	grpc.ClientStream
}

func (x *chessListenToRoomClient) Recv() (*RoomResponseStream, error) {
	m := new(RoomResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChessServer is the server API for Chess service.
// All implementations must embed UnimplementedChessServer
// for forward compatibility
type ChessServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*RoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*RoomResponse, error)
	GetRooms(context.Context, *GetRoomRequest) (*GetRoomsResponse, error)
	Moves(context.Context, *MoveRequest) (*MoveResponse, error)
	GetRoomInfo(context.Context, *GetRoomRequest) (*RoomResponse, error)
	ListenToRoom(*MoveRequest, Chess_ListenToRoomServer) error
	mustEmbedUnimplementedChessServer()
}

// UnimplementedChessServer must be embedded to have forward compatible implementations.
type UnimplementedChessServer struct {
}

func (UnimplementedChessServer) CreateRoom(context.Context, *CreateRoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChessServer) JoinRoom(context.Context, *JoinRoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedChessServer) GetRooms(context.Context, *GetRoomRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedChessServer) Moves(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Moves not implemented")
}
func (UnimplementedChessServer) GetRoomInfo(context.Context, *GetRoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (UnimplementedChessServer) ListenToRoom(*MoveRequest, Chess_ListenToRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenToRoom not implemented")
}
func (UnimplementedChessServer) mustEmbedUnimplementedChessServer() {}

// UnsafeChessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessServer will
// result in compilation errors.
type UnsafeChessServer interface {
	mustEmbedUnimplementedChessServer()
}

func RegisterChessServer(s grpc.ServiceRegistrar, srv ChessServer) {
	s.RegisterService(&Chess_ServiceDesc, srv)
}

func _Chess_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chess/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chess_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chess/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chess_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chess/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServer).GetRooms(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chess_Moves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServer).Moves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chess/Moves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServer).Moves(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chess_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chess/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServer).GetRoomInfo(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chess_ListenToRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MoveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChessServer).ListenToRoom(m, &chessListenToRoomServer{stream})
}

type Chess_ListenToRoomServer interface {
	Send(*RoomResponseStream) error
	grpc.ServerStream
}

type chessListenToRoomServer struct {
	grpc.ServerStream
}

func (x *chessListenToRoomServer) Send(m *RoomResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

// Chess_ServiceDesc is the grpc.ServiceDesc for Chess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chess",
	HandlerType: (*ChessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Chess_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Chess_JoinRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _Chess_GetRooms_Handler,
		},
		{
			MethodName: "Moves",
			Handler:    _Chess_Moves_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _Chess_GetRoomInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenToRoom",
			Handler:       _Chess_ListenToRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chess/chess.proto",
}
